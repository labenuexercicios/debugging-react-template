import React, { useState } from "react";
import { Post } from "./components/Post/Post";
import Comentario from "./components/Comentario/Comentario";

//!! Os trechos comentados fazem parte do exerc√≠cio final !!
// !!!!! n√£o descomentar ou modificar at√© l√° !!!!!

export default function App() {
  const [textoNovoPost, setTextoNovoPost] = useState("")
  const [post, setPost] = useState({})
  //const [comentario, setComentario] = useState("")  

  const onChangeTextoNovoPost = (event) => {
    setTextoNovoPost(event.target.value);
  }

  const adicionarPost = () => {
    // Adiciona um post
    const novoPost = {
      id: Date.now(),
      texto: textoNovoPost,
      curtido: false
    }

    setPost(novoPost)
  }

  const apagarPost = () => {
    // Apaga o post enviado
    setPost("")
  }

  const alterarCurtida = () => {
    // Altera o status de curtida do post
    const alterarCurtida = {
      ...post,
      curtido: !post.curtido
    }
    setPost(alterarCurtida)
  }

  // Exerc√≠cio final de debug. Descomentar s√≥ depois de finalizar o debug de post
  const [comentario, setComentario] = useState("")
  function adicionaComentario() {
    const addComentario = {
     comentario: comentario
    }
    setComentario(addComentario)
   }

   const onChangeComentario = (e) => {
     setComentario(e.target.value)
   }

  return (
    <div className="App">
      <div>
        <input
          type="text"
          onChange={onChangeTextoNovoPost}
          value={textoNovoPost}
        />
        <button onClick={adicionarPost}>Adicionar</button>
      </div>
      <br />
      <Post
        post={post}
        alteraCurtida={alterarCurtida}
        apagarPost={apagarPost}
        //onChangeComentarios={onChangeComentario}
        //adicionarComentario={adicionarComentario}
      />
      <Comentario
        onChangeComentario={onChangeComentario}
        adicionaComentario={adicionaComentario}
        comentario={comentario}
      />
    </div>
  );
}


/* # Desvendando o Mist√©rio dos Bugs no React: T√©cnicas b√°sicas de Debugging

# Bug

Programar √© como ensinar o computador a realizar tarefas. Mas, ao contr√°rio de como entendemos as instru√ß√µes de forma flex√≠vel e subjetiva, **a m√°quina segue exatamente o que √© dito**. **Quando damos instru√ß√µes erradas ou incompletas, o computador as segue sem questionar.** √â nesse momento que ocorre o chamado "bug" ou erro no programa.

Dizem que a palavra "bug" (inseto, em ingl√™s) passou a ser usada para se referir a erros em c√≥digos de computador. Uma hist√≥ria conta que uma vez, uma especialista chamada [Grace Hopper](https://pt.wikipedia.org/wiki/Grace_Hopper) percebeu que algo estava errado com seu computador. Naquela √©poca, os computadores tinham partes mec√¢nicas e a programa√ß√£o era feita de forma mec√¢nica tamb√©m. Ent√£o, quando alguma coisa f√≠sica bloqueava o movimento dessas partes, a programa√ß√£o parava de funcionar.

![Grace Hopper no console do UNIVAC I, em 1960](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/59083f29-ef0e-49a2-91a1-ebc3a524ac2f/Grace_Hopper_and_UNIVAC.jpg)

Grace Hopper no console do UNIVAC I, em 1960

Grace descobriu que um inseto havia entrado na m√°quina e, ao remov√™-lo, o "c√≥digo" voltou a funcionar corretamente. Assim, o termo "bug" come√ßou a ser usado para se referir a erros em programas de computador.

üí° N√£o existe c√≥digo sem bugs, existe c√≥digo com bugs que ainda n√£o foram encontrados.

## Debug

O termo "debug" √© utilizado para descrever a atividade de identificar e solucionar problemas e falhas em c√≥digo de computador. √â um processo essencial para garantir o bom funcionamento de um software. Existem v√°rias formas e ferramentas para isso, al√©m de ser uma habilidade muito importante para toda pessoa desenvolvedora. Faz parte do dia-a-dia!

## Processo de Debug

### O que fazer quando o c√≥digo der erro?

**O primeiro passo √© n√£o se desesperar!** Erros s√£o comuns e fazem parte da vida de todo dev. Podemos encarar bugs como um jogo ou um mist√©rio a ser resolvido.
Com calma e clareza do que est√° acontecendo, costuma ser mais tranquilo de achar o problema.

A partir da√≠, vamos quebrar o problema em **4 partes**:

1. Entenda o problema e sua origem.
2. Examine suas suposi√ß√µes.
3. Analise o c√≥digo passo a passo.
4. Teste poss√≠veis solu√ß√µes.

### Passo 1: Entenda o problema e sua origem

A primeira coisa a fazer √© **identificar claramente o problema** que voc√™ est√° tentando resolver. 

Comece fazendo duas perguntas: 
O que voc√™ esperava que seu c√≥digo fizesse? O que aconteceu no lugar?

Com a pergunta **"o que aconteceu no lugar?"** vamos invariavelmente cair em duas situa√ß√µes: 

1. O c√≥digo n√£o executa (exce√ß√£o*). 
2. Ou o c√≥digo executa mas n√£o funciona do jeito que eu estava esperando.

> * Uma **exce√ß√£o** √© um erro que impede o c√≥digo de continuar executando. √â quando a tela "explode" e exibe um erro. Bom sinal, pois temos uma sinaliza√ß√£o clara do que aconteceu e onde. Se voc√™ n√£o conhece a exce√ß√£o, pesquise!
> 

### Passo 2: Examine suas suposi√ß√µes

Quando voc√™ escreveu o c√≥digo, voc√™ esperava que ele funcionasse. Para isso, voc√™ fez uma s√©rie de suposi√ß√µes (Ex: eu supus que uma vari√°vel seria uma String). Lembre-se sempre de pensar nas coisas mais √≥bvias, que voc√™ normalmente n√£o para pra pensar:

- N√£o existe nenhum erro de digita√ß√£o no c√≥digo?
    
    Procure por erros simples, como um onClick ou onChange sem camelCase, fun√ß√µes sendo chamadas sem os par√™nteses ou sem os par√¢metros necess√°rios,  etc.
    
- Est√° usando a fun√ß√£o, estado, prop, etc. correta(o)?
    
    Verifique os nomes das vari√°veis que voc√™ est√° usando. Como foram declaradas? Se for o caso, qual o nome foi dado a ela na hora de passar por props? A fun√ß√£o ou vari√°vel chamada √© realmente a que voc√™ tinha a inten√ß√£o de chamar? 
    
    Eventualmente declaramos diferentes fun√ß√µes/estados/vari√°veis com nomes similares e isso pode confundir na hora de chamar.
    
    Dica: Quando for trabalhar com props, copie o nome dado na prop para aquela vari√°vel/fun√ß√£o, assim fica mais f√°cil de n√£o errar na hora de acessar as props em outro componente.
    
- Voc√™ mudou alguma coisa que achou que n√£o era relacionada ao problema?
    
    √Äs vezes mexemos em um trecho do c√≥digo (ou mesmo apagamos) que n√£o parecia ter uma rela√ß√£o com outra parte. √â importante tentar se lembrar de tudo o que foi modificado antes de o c√≥digo quebrar.
    
- Voc√™ esperava que uma vari√°vel tivesse um valor que ela n√£o tem?
    
    Imprima as vari√°veis no console e verifique se todas elas t√™m o valor esperado. 
    

> **Dica:** Quando n√≥s escrevemos algo, nosso c√©rebro j√° sup√µe que est√° certo. Se voc√™ estiver lendo, sem encontrar o erro, pode ser exaustivo. Muitas vezes vale mais parar um pouco de encarar o c√≥digo e distrair o c√©rebro um pouco, assim conseguimos ter mais aten√ß√£o ao voltar a ler o que escrevemos e encontrar os erros.
> 

### Passo 3: Analise o c√≥digo passo a passo

Agora que voc√™ j√° tem uma vis√£o melhor sobre o problema e j√° descartou algumas hip√≥teses, √© hora de procurar mais a fundo aonde est√° o erro. Comece de onde voc√™ sabe ou imagina que o erro aconteceu e v√° "voltando" no c√≥digo at√© ach√°-lo. Nesse passo, voc√™ tem um grande aliado: o console!

O console mostra mensagens relevantes do que acontece. A principal fun√ß√£o √© prover informa√ß√µes para debug.

N√≠veis de log:

- Info/logs: sem uma relev√¢ncia espec√≠fica (geralmente informa√ß√µes que n√≥s pedimos para serem impressas);
- **‚ö†Ô∏èWarning:** (Aviso) Coisas que podem originar problemas;
- **‚ùåError:** (Erro) Problemas que n√£o podem ser ignorados.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c1f7e89d-4b62-4c07-9952-0bd662079696/Untitled.png)

Podemos **usar o console.log para imprimir uma informa√ß√£o** que queremos no meio do c√≥digo. Muito √∫til para debugar e analisar o seu c√≥digo e podemos us√°-lo para entender melhor por onde o c√≥digo est√° passando, possibilitando entender quais dados as vari√°veis t√™m.

> **Dicas:** 
1. Ao olhar para o console, iremos ver o **erro** e o **arquivo da sua origem.** Alguns destes arquivos apontam para onde a vari√°vel foi consumida e n√£o exatamente onde quebrou. Procure no console por um arquivo que voc√™ modificou para ent√£o iniciar a busca aos erros. 

2. **Caso n√£o consiga entender o que significa o erro, use o tradutor.**

3. Foque nas palavras chave dos erros: ‚ÄúCannot find module‚Äù, ‚Äúis not defined‚Äù, ‚Äúis not a function‚Äù, etc. (Aproveite esse momento para tentar entender o que cada um destes exemplos significa).

4. Copie o texto do erro e fa√ßa uma busca pelo termo. Assim voc√™ ir√° encontrar diversas sugest√µes de como corrigir.
> 

### Passo 4: Teste poss√≠veis solu√ß√µes

Quando voc√™ estiver investigando, n√£o tenha medo de testar solu√ß√µes! Modifique o c√≥digo e veja se algo acontece, ent√£o tente entender as novas condi√ß√µes. 

√â muito importante **entender** o que est√° acontecendo e quais foram as solu√ß√µes encontradas. Arrumar bugs e encontrar solu√ß√µes √© uma das melhores formas de aprender mais e evitar que os mesmos erros ocorram no futuro.

> **Dicas:** 
1. **Fa√ßa testes conscientes!** Tente entender o que est√° acontecendo e fazer testes que te d√£o mais informa√ß√µes.

2. Lembre de **entender o que voc√™ pretende com cada teste** feito e qual o resultado aconteceu depois (√© importante rastrear o que foi testado, para conseguir entender melhor o problema)

3. Caso precise pedir ajuda, relate o que voc√™ j√° tentou para fazer a corre√ß√£o do bug: eventualmente a l√≥gica usada no teste foi correta, mas algum erro no processo acabou por prejudic√°-lo.
> 

## Mais recursos

### J√° tentei de tudo, e agora?

Depois de entender o problema e tentar as solu√ß√µes mais comuns, o que fazer?
**√Äs vezes, o bug n√£o √© √≥bvio** e √© muito dif√≠cil encontr√°-lo. Ainda assim, sempre √© poss√≠vel resolver!

### Remova o c√≥digo

Uma sa√≠da v√°lida em casos extremos √© **remover trechos do c√≥digo at√© que o erro pare** de acontecer. O ideal √© ir **comentando pequenas partes do c√≥digo** e observar o comportamento. **Quando o erro para, sabemos que a √∫ltima parte removida √© a causadora do erro!**

### Apague e reinstale depend√™ncias

√â poss√≠vel que por algum motivo, os arquivos das **bibliotecas** que usamos (`node_modules`) **tenham sido instalados com algum problema**. Frequentemente isso pode ser resolvido apagando a pasta `node_modules` e o arquivo `package-lock` **(aten√ß√£o: n√£o remova o arquivo `package.json`)** e reinstalando as depend√™ncias com `npm install`.

### Use o Google

√â muito dif√≠cil cairmos em bugs in√©ditos. Quando ca√≠mos em um bug, provavelmente existe algo sobre esse bug no Google. Para sabermos isso, basta copiar a mensagem de erro e colar no buscador. Acreditem: todos os devs usam essa t√©cnica...

### Pe√ßa ajuda

Quando j√° tentou de tudo, n√£o exite em pedir ajuda para um colega. Tenha certeza de que coletou a maior quantidade de informa√ß√µes poss√≠vel sobre o problema.
Explique o que voc√™ sabe detalhadamente. Muitas vezes voc√™ entender√° a solu√ß√£o s√≥ de explicar!

> **Dica:** Muitas vezes √© mais f√°cil encontrarmos erros em c√≥digos que n√≥s n√£o escrevemos. Por isso oferecer ajuda com bugs de colegas e pedir ajuda com bugs no nosso c√≥digo √© muito importante!
> 

## Como melhorar?

### Conhe√ßa as ferramentas dispon√≠veis

Existem muitas ferramentas √∫teis para debug, como o [Debug](https://code.visualstudio.com/docs/editor/debugging) do pr√≥prio VSCode. Falamos superficialmente de algumas, mas elas tem muitas funcionalidades extras. Estude e pesquise sobre elas! Isso pode facilitar muito a sua vida :)

### Pratique

üí° N√£o tenha medo de bugs. Fa√ßa um esfor√ßo para resolver problemas e entender as solu√ß√µes. Criar bugs faz parte de programar: aceite isso! Ajude os colegas, isso traz mais experi√™ncia e agilidade.

> **Dicas:** 
1. Quanto mais nos expomos a bugs, mais f√°cil fica debugar um c√≥digo.

2. Aproveite o f√≥rum da turma para ler os bugs que aparecem e ajudar a buscar uma solu√ß√£o. Caso j√° tenha sido resolvido, leia e tente entender o que funcionou. Assim voc√™ conhece alguns erros e, caso tenha o mesmo problema, j√° ter√° alguma ideia de como resolver.
> */